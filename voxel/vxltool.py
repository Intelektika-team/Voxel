import sys
import os
from voxel.lang import ver_str
import voxel.lang as lang
from voxel.interface import color
import requests
import base64
from urllib.parse import urlparse

def download_github_file(repo_url, file_path, token=None):
    # Извлекаем владельца и название репозитория из URL
    parsed_url = urlparse(repo_url)
    path_parts = parsed_url.path.strip('/').split('/')
    
    if len(path_parts) < 2:
        raise ValueError("Invalid GitHub repository URL")
    
    owner = path_parts[0]
    repo = path_parts[1].replace('.git', '')  # Убираем .git если присутствует
    
    # Формируем URL для API запроса
    api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/{file_path}"
    
    # Добавляем заголовки для аутентификации если предоставлен токен
    headers = {}
    if token:
        headers['Authorization'] = f'token {token}'
    
    # Выполняем запрос к GitHub API
    response = requests.get(api_url, headers=headers)
    
    if response.status_code == 200:
        file_data = response.json()
        
        # Проверяем что это файл а не директория
        if file_data.get('type') != 'file':
            raise ValueError("The specified path is not a file")
        
        # Декодируем содержимое из base64
        content = base64.b64decode(file_data['content']).decode('utf-8')
        return content
        
    elif response.status_code == 404:
        raise ValueError("File or repository not found")
    else:
        raise Exception(f"Failed to download file. Status code: {response.status_code}")



def new(name):
    current = os.getcwd()
    dir_path = os.path.join(current, name)

    print(color.set('Creating project ===', color.GREEN))
    print(color.set(f'Creating {name}...', color.YELLOW))

    if not os.path.exists(dir_path):
        os.makedirs(dir_path)
        print(color.set(f"Directory '{dir_path}' created successfully.", color.YELLOW))
    else:
        lang.Errors.FileERROR('Directory already exists')
        return  # Прекратить создание проекта, если директория есть

    os.chdir(dir_path)

    code = """//= Hello user! That's the basic structure of voxel program. We recommended to write code like that.;
@start; //= !WARNING! - @start should be outside of functions;
:voxel-setup-{
    @include= tape /:
    @include= first_program /:
    @updata /:
    //= Your setup-voxel here /:
};
:voxel-program-{
    pyl= main("User") /:
    //= Your program-voxel here /:
};
//= Start;
:voxel-main-{
    use= setup /:
    use= program /:
    //= Your main-voxel here /:
};
use= main;
:exit; //= End;
"""
    with open('main.vox', 'w', encoding='utf-8') as file:
        file.write(code)
        print(color.set("File 'main.vox' created successfully.", color.YELLOW))

    dotvoxel = f"""//= That autogenerated file in - {dir_path};
//= Use that dir for your project;
//= Current VoxelLang version - {ver_str};
//= Project version - 0.1.0;
//= Author - [YOUR_NAME];
//= Description - [DESCRIPTION];
"""

    with open('init.voxel', 'w', encoding='utf-8') as file:
        file.write(dotvoxel)
        print(color.set("Language file 'init.voxel' created successfully.", color.YELLOW))

    deps_path = os.path.join(dir_path, "_voxel_", "_dependencies_")
    if not os.path.exists(deps_path):
        os.makedirs(deps_path)
        print(color.set(f"Directory '{deps_path}' created successfully.", color.YELLOW))

        code_dependencies = """def main():
    print('Hello world')
"""
        with open(os.path.join(deps_path, 'test.py'), 'w', encoding='utf-8') as file:
            file.write(code_dependencies)
            print(color.set("Dependencies file 'test.py' created successfully.", color.YELLOW))
    else:
        print(color.set('Project dependencies folder already exists', color.YELLOW))

    os.chdir(current)
    print(color.set("Project created =====", color.GREEN))

def build(command, name='', to=''):
    if command in ('build', '-b'):
        if not name or not to:
            print("Incorrect argument format. Correct: 'vox -b {name.vox} {buildfile.py}'")
            return
        try:
            print(color.set(f'Building {name} to {to}...', color.YELLOW))
            with open(name, 'r', encoding='utf-8') as f:
                file = f.read()
            print(color.set('Open success... \n Build...', color.YELLOW))
            lang.builder(file, to)
            print(color.set('\nBuild success...', color.GREEN))
        except FileNotFoundError:
            print(lang.Errors.SystemERROR('File not found.', False))
        except Exception as e:
            print(lang.Errors.SystemERROR(f'Build error: {e}', False))

    elif command in ('buildstd', '-bst'):
        try:
            path = "main.vox"
            print(color.set(f'Building {path} to build.py...', color.YELLOW))
            with open(path, 'r', encoding='utf-8') as f:
                file = f.read()
            print(color.set('Open success... \n Build...', color.YELLOW))
            lang.builder(file, "build.py")
            print(color.set('\nBuild success...', color.GREEN))
        except FileNotFoundError:
            print(lang.Errors.SystemERROR('File not found.', False))
        except Exception as e:
            print(lang.Errors.SystemERROR(f'Build error: {e}', False))
    else:
        print("Unknown build command.")

def buildnrun(command, name='', to=''):
    if command in ('buildnrun', '-br'):
        if not name or not to:
            print("Incorrect argument format. Correct: 'vox -br {name.vox} {buildfile.py}'")
            return

        build('build', name, to)
        target_file = os.path.join('_voxel_', to) if to else os.path.join('_voxel_', 'build.py')

        if os.path.exists(target_file):
            try:
                print(color.set(f'\nRunning {target_file}...', color.CYAN))
                exit_code = os.system(f'python "{target_file}"')
                if exit_code != 0:
                    print(color.set(f'Program exited with code: {exit_code}', color.RED))
            except Exception as e:
                print(lang.Errors.SystemERROR(f'Error running file: {e}', False))
        else:
            print(lang.Errors.SystemERROR(f'Output file {target_file} not found.', False))

    elif command in ('buildnrunstd', '-brs'):
        build('buildstd', '', '')
        target_file = os.path.join('_voxel_', 'build.py')

        if os.path.exists(target_file):
            try:
                print(color.set(f'\nRunning {target_file}...', color.CYAN))
                exit_code = os.system(f'python "{target_file}"')
                if exit_code != 0:
                    print(color.set(f'Program exited with code: {exit_code}', color.RED))
            except Exception as e:
                print(lang.Errors.SystemERROR(f'Error running file: {e}', False))
        else:
            print(lang.Errors.SystemERROR(f'Output file {target_file} not found.', False))
    else:
        print("Unknown build and run command.")


def install(name):
    # Проверяем что мы в проекте Voxel
    if not os.path.exists('init.voxel'):
        raise SystemError('Error: You must be in a voxel project directory. File init.voxel not found.')
    
    # Создаем папку _voxel_ если её нет
    voxel_dir = '_voxel_'
    if not os.path.exists(voxel_dir):
        os.makedirs(voxel_dir)
        print(color.set(f"Directory '{voxel_dir}' created successfully.", color.YELLOW))

    try:
        print('Downloading...')
        # Используем основной URL репозитория без /scripts
        repo_url = 'https://github.com/Intelektika-team/vxl'
        file_content = download_github_file(repo_url, f'scripts/{name}.py')
    except Exception as e:
        print(color.set(f'Download failed: {e}', color.RED))
        return

    print('Downloading done...')
    print('Creating file...')
    
    # Сохраняем в папку _voxel_
    file_path = os.path.join(voxel_dir, f'{name}.py')
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(file_content)
    
    print(color.set(f'File {file_path} created successfully.', color.GREEN))

def show_help():
    print(
f"""
=== VOXEL LANGUAGE TOOL ===
Version:
    {ver_str}
Commands:
    -h                         : Show this help message
    -n <name>                  : Create a new project with the given name
    -b <src.vox> <output.py>   : Build source .vox file into output Python file
    -bs                        : Build standard main.vox into _voxel_/build.py
    -br <src.vox> <output.py>  : Build and run the built Python file
    -brs                       : Build and run standard main.vox
    -v                         : Show VoxelLang version
    -i <script_name>           : Download lib to _voxel_/_dependencies_
Notes:
    Make sure to use correct file extensions and paths.
"""
    )

def main():
    if len(sys.argv) < 2:
        print("No arguments provided.")
        show_help()
        return

    command = sys.argv[1]
    args = sys.argv[2:]

    if command in ('-n', 'new'):
        if len(args) != 1:
            print("Incorrect argument format. Correct: 'vox -n {name}'")
            return
        new(args[0])

    elif command in ('-b', 'build'):
        if len(args) != 2:
            print("Incorrect argument format. Correct: 'vox -b {name.vox} {buildfile.py}'")
            return
        build('build', args[0], args[1])

    elif command in ('-bs', 'buildstd'):
        build('buildstd')

    elif command in ('-br', 'buildnrun'):
        if len(args) != 2:
            print("Incorrect argument format. Correct: 'vox -br {name.vox} {buildfile.py}'")
            return
        buildnrun('buildnrun', args[0], args[1])

    elif command in ('-brs', 'buildnrunstd'):
        buildnrun('buildnrunstd')

    elif command in ('-h', 'help'):
        show_help()
    
    elif command in ('-i', 'install'):
        install(args[0])

    elif command in ('-v', 'ver'):
        print(f'VoxelLang version: {ver_str}')

    else:
        print(f'Unknown command: {command}')
        show_help()




if __name__ == '__main__':
    main()
